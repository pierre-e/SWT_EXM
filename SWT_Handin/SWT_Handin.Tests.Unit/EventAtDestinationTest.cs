///////////////////////////////////////////////////////////
//  EventAtDestinationTest.cs
//  Implementation of the Class EventAtDestinationTest
//  Generated by Enterprise Architect
//  Created on:      18-jun-2014 01:26:50
//  Original author: Pierre
///////////////////////////////////////////////////////////


using System.Collections.Generic;
using NSubstitute;
using NUnit.Framework;

namespace SWT_Handin.Tests.Unit
{
    [TestFixture]
    public class EventAtDestinationTest
    {
        [Test]
        public void DetectEvent_Handof_East_Valid()
        {
            var atc = Substitute.For<ATC>();
            var myHappening = new EventAtDestination();
            myHappening.AttachToAtc(ref atc);
            ITrack t1 = new TwoDTrackFactory().CreateTrack("Test", 80, new TwoDPosition(100000, 50), Direction.East);
            List<EventMessage> check = myHappening.CheckEventConditions(new List<ITrack> {t1});
            Assert.True(check.Count > 0);
        }

        [Test]
        public void DetectEvent_Handof_North_Valid()
        {
            var atc = Substitute.For<ATC>();
            var myHappening = new EventAtDestination();
            myHappening.AttachToAtc(ref atc);
            ITrack t1 = new TwoDTrackFactory().CreateTrack("Test", 80, new TwoDPosition(50, 0), Direction.North);
            List<EventMessage> check = myHappening.CheckEventConditions(new List<ITrack> {t1});
            Assert.True(check.Count > 0);
        }

        [Test]
        public void DetectEvent_Handof_South_Valid()
        {
            var atc = Substitute.For<ATC>();
            var myHappening = new EventAtDestination();
            myHappening.AttachToAtc(ref atc);
            ITrack t1 = new TwoDTrackFactory().CreateTrack("Test", 80, new TwoDPosition(50, 100000), Direction.South);
            List<EventMessage> check = myHappening.CheckEventConditions(new List<ITrack> {t1});
            Assert.True(check.Count > 0);
        }

        [Test]
        public void DetectEvent_Handof_West_Valid()
        {
            var atc = Substitute.For<ATC>();
            var myHappening = new EventAtDestination();
            myHappening.AttachToAtc(ref atc);
            ITrack t1 = new TwoDTrackFactory().CreateTrack("Test", 80, new TwoDPosition(0, 50), Direction.West);
            List<EventMessage> check = myHappening.CheckEventConditions(new List<ITrack> {t1});
            Assert.True(check.Count > 0);
        }

        [Test]
        public void HookToDetector_Succes()
        {
            var myHappening = new EventAtDestination();
            myHappening.HookToDetector();
            Assert.True(EventHandler.EventList[EventHandler.EventList.Count - 1] is EventAtDestination);
        }
    } //end EventAtDestinationTest
} //end namespace UnitTests